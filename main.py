import os
import sqlite3
from datetime import datetime, timedelta
from dotenv import load_dotenv
from utils import (
    generate_horizontal_chart,
    generate_line_chart,
    generate_bar_chart,
    generate_pie_chart,
)
from exotic_analytics import (
    get_retention_stats,
    get_weekly_stats,
    get_summary_stats
)
from aiogram.types import FSInputFile

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton
)

load_dotenv()

BOT_TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_ID = os.environ.get("ADMIN_ID")

if not BOT_TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not ADMIN_ID:
    raise RuntimeError("‚ùå ADMIN_ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

class DateRangeState(StatesGroup):
    start_date = State()
    end_date = State()

@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ —ç–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–º –∂–∏–≤–æ—Ç–Ω—ã–º ü¶é\n\n–ò—Å–ø–æ–ª—å–∑—É–π /exotic")

@dp.message(Command("exotic"))
async def exotic_handler(message: Message):
    stats = get_summary_stats()

    text = (
        "<b>üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º –¥–ª—è —ç–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö:</b>\n\n"
        f"üîπ –í—Å–µ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: {stats['total']}\n"
        f"üîπ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['unique_users']}\n"
        f"üîπ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stats['avg_duration']} –º–∏–Ω\n\n"
        "üìÖ <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü:</b>\n"
        f"üîπ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: {stats['monthly_count']}\n"
        f"üîπ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stats['monthly_avg_duration']} –º–∏–Ω"
    )

    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    graph_data = {
        "–ò–≥—É–∞–Ω–∞": 21,
        "–ü–∞—É–∫-–ø—Ç–∏—Ü–µ–µ–¥": 23,
        "–ü–æ–ø—É–≥–∞–π": 38,
        "–§—Ä–µ—Ç–∫–∞": 33,
        "–•–∞–º–µ–ª–µ–æ–Ω": 35
    }

    bar_path = generate_bar_chart(graph_data)
    pie_path = generate_pie_chart(graph_data)

    await message.answer_photo(FSInputFile(bar_path))
    await message.answer(text, parse_mode="HTML")
    await message.answer_photo(FSInputFile(pie_path))

@dp.message(Command("admin"))
async def admin_dashboard(message: Message):
    if str(message.from_user.id) != str(ADMIN_ID):
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")],
            [KeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç")],
            [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
        ],
        resize_keyboard=True
    )

    await message.answer("üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Admin Dashboard!", reply_markup=keyboard)

@dp.message(F.text == "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def admin_stats(message: Message):
    total, repeat = get_retention_stats()
    await message.answer(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n‚Äì –í—Å–µ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: 134\n‚Äì –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n‚Äì –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –≤–∏–∑–∏—Ç—ã: {repeat}")

    weekly_data = get_weekly_stats()
    chart_path = generate_line_chart(weekly_data)
    await message.answer_photo(photo=FSInputFile(chart_path), caption="üìâ –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –Ω–µ–¥–µ–ª—è–º")

@dp.message(F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def admin_users(message: Message):
    total, repeat = get_retention_stats()
    await message.answer(f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\nüîÅ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –≤–∏–∑–∏—Ç—ã: {repeat}")

@dp.message(F.text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç")
async def admin_export(message: Message):
    await message.answer("üì§ –≠–∫—Å–ø–æ—Ä—Ç —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω (CSV / Excel)")

@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def admin_settings(message: Message):
    await message.answer("‚öôÔ∏è –ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: —Å–º–µ–Ω–∞ –ø–µ—Ä–∏–æ–¥–∞, –∞–≤—Ç–æ–æ—Ç—á—ë—Ç—ã, —Ñ–∏–ª—å—Ç—Ä—ã –∏ —Ç.–¥.")

if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
