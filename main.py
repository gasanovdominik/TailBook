import os
import sqlite3
from datetime import datetime, timedelta
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

load_dotenv()

# ==== –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø ====
BOT_TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_ID = os.environ.get("ADMIN_ID")

if not BOT_TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not ADMIN_ID:
    raise RuntimeError("‚ùå ADMIN_ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# ==== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# ==== FSM ====
class DateRangeState(StatesGroup):
    start_date = State()
    end_date = State()

# ==== /start ====
@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ —ç–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–º –∂–∏–≤–æ—Ç–Ω—ã–º ü¶é\n\n–ò—Å–ø–æ–ª—å–∑—É–π /exotic")

# ==== /exotic –∏ –∫–Ω–æ–ø–∫–∏ ====
def get_period_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="7 –¥–Ω–µ–π", callback_data="period_7")],
        [InlineKeyboardButton(text="30 –¥–Ω–µ–π", callback_data="period_30")],
        [InlineKeyboardButton(text="–ì–æ–¥", callback_data="period_365")],
        [InlineKeyboardButton(text="–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="custom_period")]
    ])

@dp.message(Command("exotic"))
async def exotic_handler(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥:", reply_markup=get_period_keyboard())

@dp.callback_query(F.data.startswith("period_"))
async def handle_fixed_period(callback: CallbackQuery):
    days = int(callback.data.split("_")[1])
    end = datetime.now().date()
    start = end - timedelta(days=days)
    await callback.message.answer(f"üìä –ê–Ω–∞–ª–∏–∑ –∑–∞ –ø–µ—Ä–∏–æ–¥: {start} ‚Äì {end}")
    await callback.answer()

@dp.callback_query(F.data == "custom_period")
async def handle_custom_period(callback: CallbackQuery, state: FSMContext):
    await state.set_state(DateRangeState.start_date)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")
    await callback.answer()

@dp.message(DateRangeState.start_date)
async def receive_start_date(message: Message, state: FSMContext):
    try:
        start_date = datetime.strptime(message.text, "%Y-%m-%d").date()
        await state.update_data(start_date=start_date)
        await state.set_state(DateRangeState.end_date)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: YYYY-MM-DD")

@dp.message(DateRangeState.end_date)
async def receive_end_date(message: Message, state: FSMContext):
    try:
        end_date = datetime.strptime(message.text, "%Y-%m-%d").date()
        data = await state.get_data()
        start_date = data.get("start_date")
        await state.clear()
        await message.answer(f"üìä –ê–Ω–∞–ª–∏–∑ –∑–∞ –ø–µ—Ä–∏–æ–¥: {start_date} ‚Äì {end_date}")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: YYYY-MM-DD")

# ==== /admin ====
@dp.message(Command("admin"))
async def admin_dashboard(message: Message):
    if str(message.from_user.id) != str(ADMIN_ID):
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")],
            [KeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç")],
            [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª"
    )

    await message.answer("üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Admin Dashboard!", reply_markup=keyboard)

# ==== –ó–∞–ø—É—Å–∫ ====
if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))






