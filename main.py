import os
import asyncio
import sqlite3
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class DateRangeState(StatesGroup):
    start_date = State()
    end_date = State()

# –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ö–Ω–æ–ø–∫–∏
filter_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="7 –¥–Ω–µ–π", callback_data="filter_7")],
    [InlineKeyboardButton(text="30 –¥–Ω–µ–π", callback_data="filter_30")],
    [InlineKeyboardButton(text="–ì–æ–¥", callback_data="filter_365")],
    [InlineKeyboardButton(text="–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="filter_custom")]
])

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
def connect_db():
    return sqlite3.connect("support_bot.db")

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(F.text == "/start")
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ —ç–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–º –∂–∏–≤–æ—Ç–Ω—ã–º üêç\n\n–ò—Å–ø–æ–ª—å–∑—É–π /exotic")

# –ö–æ–º–∞–Ω–¥–∞ /exotic
@dp.message(F.text == "/exotic")
async def exotic_handler(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥:", reply_markup=filter_keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /admin
@dp.message(F.text == "/admin")
async def admin_handler(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    await message.answer("Admin Dashboard:\n\n(–ó–¥–µ—Å—å –±—É–¥—É—Ç –∫–Ω–æ–ø–∫–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∫–∏)")

# Callback –∫–Ω–æ–ø–∫–∏
@dp.callback_query(F.data.startswith("filter_"))
async def filter_callback(callback: CallbackQuery, state: FSMContext):
    period = callback.data.split("_")[1]
    now = datetime.now()

    if period == "custom":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")
        await state.set_state(DateRangeState.start_date)
        await callback.answer()
        return

    if period == "7":
        start = now - timedelta(days=7)
    elif period == "30":
        start = now - timedelta(days=30)
    elif period == "365":
        start = now - timedelta(days=365)
    else:
        await callback.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
        return

    start_str = start.strftime("%Y-%m-%d 00:00:00")
    end_str = now.strftime("%Y-%m-%d 23:59:59")

    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT animal_type, COUNT(*) FROM exotic_consultations
        WHERE consultation_date BETWEEN ? AND ?
        GROUP BY animal_type
    ''', (start_str, end_str))
    rows = cursor.fetchall()
    conn.close()

    if not rows:
        await callback.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
    else:
        text = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:\n\n"
        for animal, count in rows:
            text += f"{animal}: {count}\n"
        await callback.message.answer(text)

    await callback.answer()

# –ü–µ—Ä–≤–∞—è –¥–∞—Ç–∞ (–≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
@dp.message(DateRangeState.start_date)
async def custom_start(message: Message, state: FSMContext):
    text = message.text.strip()
    try:
        datetime.strptime(text, "%Y-%m-%d")
        await state.update_data(start_date=text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")
        await state.set_state(DateRangeState.end_date)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD.")

# –í—Ç–æ—Ä–∞—è –¥–∞—Ç–∞
@dp.message(DateRangeState.end_date)
async def custom_end(message: Message, state: FSMContext):
    text = message.text.strip()
    try:
        datetime.strptime(text, "%Y-%m-%d")
        data = await state.get_data()
        start = data["start_date"]
        end = text

        conn = connect_db()
        cursor = conn.cursor()
        cursor.execute('''
            SELECT animal_type, COUNT(*) FROM exotic_consultations
            WHERE consultation_date BETWEEN ? AND ?
            GROUP BY animal_type
        ''', (start + " 00:00:00", end + " 23:59:59"))
        rows = cursor.fetchall()
        conn.close()

        if not rows:
            await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
        else:
            text = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:\n\n"
            for animal, count in rows:
                text += f"{animal}: {count}\n"
            await message.answer(text)

        await state.clear()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD.")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))




