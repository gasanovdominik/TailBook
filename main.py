import os
import sqlite3
import re
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from aiogram.enums.dice_emoji import DiceEmoji

from utils import generate_horizontal_chart

# ==== –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø ====

BOT_TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_ID = os.environ.get("ADMIN_ID")

if not BOT_TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not ADMIN_ID:
    raise RuntimeError("‚ùå ADMIN_ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# ==== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# ==== FSM ====

class DateRangeState(StatesGroup):
    start_date = State()
    end_date = State()

# ==== –ë–ê–ó–ê ====

def connect_db():
    return sqlite3.connect("support_bot.db")

# ==== /start ====

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ —ç–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–º –∂–∏–≤–æ—Ç–Ω—ã–º ü¶é\n\n–ò—Å–ø–æ–ª—å–∑—É–π /exotic")

# ==== /exotic ====

@dp.message(Command("exotic"))
async def cmd_exotic(message: Message):
    kb = InlineKeyboardBuilder()
    kb.button(text="7 –¥–Ω–µ–π", callback_data="filter_7")
    kb.button(text="30 –¥–Ω–µ–π", callback_data="filter_30")
    kb.button(text="–ì–æ–¥", callback_data="filter_365")
    kb.button(text="–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="filter_custom")
    kb.adjust(1)
    await message.answer("–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥:", reply_markup=kb.as_markup())

# ==== –û–ë–†–ê–ë–û–¢–ö–ê –§–ò–õ–¨–¢–†–û–í ====

@dp.callback_query(F.data.startswith("filter_"))
async def filter_callback(callback: CallbackQuery, state: FSMContext):
    action = callback.data.split("_")[1]

    if action == "custom":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")
        await state.set_state(DateRangeState.start_date)
        await callback.answer()
        return

    days = int(action)
    end_date = datetime.now()
    start_date = end_date - timedelta(days=days)

    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT animal_type, COUNT(*) FROM exotic_consultations
        WHERE consultation_date BETWEEN ? AND ?
        GROUP BY animal_type
    ''', (start_date.strftime("%Y-%m-%d %H:%M:%S"), end_date.strftime("%Y-%m-%d %H:%M:%S")))
    rows = cursor.fetchall()
    conn.close()

    if not rows:
        await callback.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
    else:
        text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:\n\n"
        for animal, count in rows:
            text += f"üêæ {animal}: {count}\n"
        await callback.message.answer(text)

    await callback.answer()

# ==== FSM: –í–í–û–î –ü–ï–†–í–û–ô –î–ê–¢–´ ====

@dp.message(DateRangeState.start_date)
async def set_start_date(message: Message, state: FSMContext):
    date_text = message.text.strip()
    if not re.match(r"\d{4}-\d{2}-\d{2}", date_text):
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")
        return
    await state.update_data(start_date=date_text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")
    await state.set_state(DateRangeState.end_date)

# ==== FSM: –í–í–û–î –í–¢–û–†–û–ô –î–ê–¢–´ ====

@dp.message(DateRangeState.end_date)
async def set_end_date(message: Message, state: FSMContext):
    date_text = message.text.strip()
    if not re.match(r"\d{4}-\d{2}-\d{2}", date_text):
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")
        return

    data = await state.get_data()
    start_date = data['start_date']
    end_date = date_text

    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT animal_type, COUNT(*) FROM exotic_consultations
        WHERE consultation_date BETWEEN ? AND ?
        GROUP BY animal_type
    ''', (start_date + " 00:00:00", end_date + " 23:59:59"))
    rows = cursor.fetchall()
    conn.close()

    if not rows:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
    else:
        text = f"üìä –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å {start_date} –ø–æ {end_date}:\n\n"
        for animal, count in rows:
            text += f"üêæ {animal}: {count}\n"
        await message.answer(text)

    await state.clear()

# ==== /admin ====

@dp.message(Command("admin"))
async def admin_command(message: Message):
    if str(message.from_user.id) != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")],
            [KeyboardButton(text="–≠–∫—Å–ø–æ—Ä—Ç")],
            [KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
        ],
        resize_keyboard=True
    )
    await message.answer("üîê Admin Dashboard", reply_markup=kb)

# ==== RUN ====

if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))



