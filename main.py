import asyncio
import io
import re
import sqlite3
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters.command import Command
from aiogram.enums import ParseMode
import os
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())


# ========== FSM –°–æ—Å—Ç–æ—è–Ω–∏—è ==========
class DateRangeState(StatesGroup):
    start_date = State()
    end_date = State()


# ========== –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ ==========
filter_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="7 –¥–Ω–µ–π", callback_data="filter_7")],
    [InlineKeyboardButton(text="30 –¥–Ω–µ–π", callback_data="filter_30")],
    [InlineKeyboardButton(text="–ì–æ–¥", callback_data="filter_365")],
    [InlineKeyboardButton(text="–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="filter_custom")]
])


# ========== –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î ==========
def connect_db():
    return sqlite3.connect("support_bot.db")


# ========== –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ ==========
def generate_horizontal_chart(start_date: str, end_date: str) -> io.BytesIO | None:
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT animal_type, COUNT(*) FROM exotic_consultations
        WHERE consultation_date BETWEEN ? AND ?
        GROUP BY animal_type
    ''', (start_date + " 00:00:00", end_date + " 23:59:59"))
    data = cursor.fetchall()
    conn.close()

    if not data:
        return None

    animals = [row[0] for row in data]
    counts = [row[1] for row in data]

    plt.figure(figsize=(8, 5))
    bars = plt.barh(animals, counts, color='mediumseagreen')
    plt.xlabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π")
    plt.title("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø–∞–º –∂–∏–≤–æ—Ç–Ω—ã—Ö")

    for bar in bars:
        width = bar.get_width()
        plt.text(width + 0.1, bar.get_y() + bar.get_height() / 2, str(int(width)), va='center')

    buf = io.BytesIO()
    plt.tight_layout()
    plt.savefig(buf, format='png')
    buf.seek(0)
    return buf


# ========== –ö–æ–º–∞–Ω–¥–∞ /start ==========
@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ —ç–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–º –∂–∏–≤–æ—Ç–Ω—ã–º ü¶é\n\n–ò—Å–ø–æ–ª—å–∑—É–π /exotic")


# ========== –ö–æ–º–∞–Ω–¥–∞ /exotic ==========
@dp.message(Command("exotic"))
async def exotic_handler(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥:", reply_markup=filter_keyboard)


# ========== –ö–Ω–æ–ø–∫–∏ 7, 30, 365 –¥–Ω–µ–π ==========
@dp.callback_query(F.data.startswith("filter_"))
async def filter_predefined(callback: CallbackQuery):
    period = callback.data.split("_")[1]
    days = int(period)
    end = datetime.now()
    start = end - timedelta(days=days)

    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT animal_type, COUNT(*) FROM exotic_consultations
        WHERE consultation_date BETWEEN ? AND ?
        GROUP BY animal_type
    ''', (start.strftime('%Y-%m-%d 00:00:00'), end.strftime('%Y-%m-%d 23:59:59')))
    rows = cursor.fetchall()
    conn.close()

    if not rows:
        await callback.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.")
        return

    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:\n\n"
    for animal, count in rows:
        text += f"üêæ {animal}: {count}\n"
    await callback.message.answer(text)

    chart = generate_horizontal_chart(start.strftime('%Y-%m-%d'), end.strftime('%Y-%m-%d'))
    if chart:
        await callback.message.answer_photo(chart, caption="–ì—Ä–∞—Ñ–∏–∫ –ø–æ —Ç–∏–ø–∞–º –∂–∏–≤–æ—Ç–Ω—ã—Ö üêæ")

    await callback.answer()


# ========== –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥" ==========
@dp.callback_query(F.data == "filter_custom")
async def start_custom_filter(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")
    await state.set_state(DateRangeState.start_date)
    await callback.answer()


# ========== –í–≤–æ–¥ –ø–µ—Ä–≤–æ–π –¥–∞—Ç—ã ==========
@dp.message(DateRangeState.start_date)
async def set_start_date(message: Message, state: FSMContext):
    date_text = message.text.strip()
    if not re.match(r"\d{4}-\d{2}-\d{2}", date_text):
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")
        return

    await state.update_data(start_date=date_text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")
    await state.set_state(DateRangeState.end_date)


# ========== –í–≤–æ–¥ –≤—Ç–æ—Ä–æ–π –¥–∞—Ç—ã –∏ –≤—ã–≤–æ–¥ –≥—Ä–∞—Ñ–∏–∫–∞ ==========
@dp.message(DateRangeState.end_date)
async def set_end_date(message: Message, state: FSMContext):
    date_text = message.text.strip()
    if not re.match(r"\d{4}-\d{2}-\d{2}", date_text):
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")
        return

    data = await state.get_data()
    start_date = data["start_date"]
    end_date = date_text

    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT animal_type, COUNT(*) FROM exotic_consultations
        WHERE consultation_date BETWEEN ? AND ?
        GROUP BY animal_type
    ''', (start_date + " 00:00:00", end_date + " 23:59:59"))
    rows = cursor.fetchall()
    conn.close()

    if not rows:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
    else:
        text = f"üìä –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å {start_date} –ø–æ {end_date}:\n\n"
        for animal, count in rows:
            text += f"üêæ {animal}: {count}\n"
        await message.answer(text)

        chart = generate_horizontal_chart(start_date, end_date)
        if chart:
            await message.answer_photo(photo=chart, caption="–ì—Ä–∞—Ñ–∏–∫ –ø–æ —Ç–∏–ø–∞–º –∂–∏–≤–æ—Ç–Ω—ã—Ö üêæ")

    await state.clear()


# ========== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ==========
if __name__ == "__main__":
    import logging

    logging.basicConfig(level=logging.INFO)
    asyncio.run(dp.start_polling(bot))


